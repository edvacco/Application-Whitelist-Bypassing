using Contracts;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Text;

namespace ExploitEngine.Vulnerabilities
{
    public class ExploitBase : IExploit
    {
        protected Threat Threat { get; set; }
        protected string ExploitFilePath { get; set; }
        protected string Command { get; set; }

        public ExploitBase(string exploitFilePath, string command= "\"{0}\" {1}")
        {
            this.ExploitFilePath = exploitFilePath;
            this.Command = command;
        }

        protected void RunCommandOnChildShell(Threat threat, string command)
        {
            var processInfo = new ProcessStartInfo
            {
                UseShellExecute = false, // change value to false
                FileName = "cmd.exe",
                Arguments = $"/c {command}"
            };

            Console.WriteLine($"Starting exploit: {threat.Type.ToString()} for the vulnerability: {threat.FilePath}");
            using (var process = Process.Start(processInfo))
            {
                process.WaitForExit();
            }
        }

        public virtual void Initialize(Threat threat)
        {
            this.Threat = threat;
        }

        public virtual void Exploit()
        {
            string workingDirectory = Path.GetDirectoryName(System.Reflection.Assembly.GetEntryAssembly().Location);
            string exploitPath = Path.Combine(workingDirectory, ExploitFilePath);
            string command = string.Format(Command, Threat.FilePath, exploitPath);
            RunCommandOnChildShell(Threat, command);
        }
    }
}
